#!/bin/bash

# Copies files and store destination paths in a reference array
copy_files_and_store_paths() {
    local source_dir="$1"   # source directory
    local dest_dir="$2"     # destination directory
    # array passed by reference
    local -n dest_paths_ref=$3

    mkdir -p "$dest_dir"

    # Find and copy files
    while IFS= read -r file; do
        # Compute relative path
        local rel_path="${file#"$source_dir/"}"
        local dest_path="$dest_dir/$rel_path"

        mkdir -p "$(dirname "$dest_path")"

        cp "$file" "$dest_path"

        # Add destination path to the array
        dest_paths_ref+=("$dest_path")
    done < <(find "$source_dir" -type f)
}

set -e

echo -e "\n-------------------------------------------------------------------------------------------\n"
date

set -x

cd "$(dirname "$0")"
templates_dir="/usr/local/bin/templates"
test_repo=/tmp/test-repo
last_build="$HOME/.last_build"

rm -rf $test_repo
cd ../../ # we're in repo root

# copy the repo over to a temp directory and switch to it
rsync -ax --exclude site-builder/target . $test_repo
cd $test_repo
token=$(cat ./.token)
ip_token=$(cat ./.ip_token)
git reset --hard
# git checkout bot-publish
git checkout gh-pages
git fetch
git reset --hard origin/gh-pages

# run the binary and tailwind to generate  deployment artifacts
GH_TOKEN=$token IP_API_TOKEN=$ip_token site-builder --template-file-path="$templates_dir/index.html" --out-file-path="$test_repo/index.html"
tailwindcss --content "$test_repo/*.html" -c "$templates_dir/tailwind.config.js" -i "$templates_dir/tw.css" -o "$test_repo/style.css"

# copy static files over
declare -a STATIC_FILES
copy_files_and_store_paths "$templates_dir/static" "$test_repo" STATIC_FILES


# new file generated by binary
new="$test_repo/index.html"

if cmp --silent "$last_build" "$new"; then
    set +x
    echo "files are the same, no need to publish"
    echo -e "\n-------------------------------------------------------------------------------------------\n"
    exit 0
fi

set +x
echo "files differ, publishing"
set -x
publish_date=$(date)
git add "$test_repo/index.html" "$test_repo/style.css" "${STATIC_FILES[@]}"
git commit -m "Bot publish: $publish_date"
git push

cp "$new" "$last_build"

set +x
echo -e "\n-------------------------------------------------------------------------------------------\n"
